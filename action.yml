name: "Add Issues to Project"
description: "Adds issues from the repository to a specified GitHub Project."
author: "SATVILab"
inputs:
  project_name:
    description: "Name of the project to which issues should be added"
    required: true
    default: ""
  org_name:
    description: "Name of the organization (if the project is an organization project)"
    required: false
    default: "SATVILab"
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up GitHub CLI and jq
      run: |
        sudo apt update -y
        sudo apt install -y gh jq
    - name: Authenticate with PAT
      env:
        PUSH_TO_PROJECT_TOKEN: "${{ secrets.PUSH_TO_PROJECT_TOKEN }}"
      run: |
        unset GH_TOKEN
        unset GITHUB_TOKEN
        echo "$PUSH_TO_PROJECT_TOKEN" | gh auth login --with-token
    - name: Install gh-projects extension
      run: gh extension install github/gh-projects
    - name: Get project ID
      id: get-project-id
      env:
        PROJECT_NAME: "${{ inputs.project_name }}"
        ORG_NAME: "${{ inputs.org_name }}"
      run: |
        if [ -z "${ORG_NAME}" ]; then
          project_number=$(gh projects list --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .number')
          project_id=$(gh projects list --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .id')
        else
          project_number=$(gh projects list --org "${ORG_NAME}" --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .number')
          project_id=$(gh projects list --org "${ORG_NAME}" --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .id')
        fi

        if [ -z "${project_number}" ] || [ -z "${project_id}" ]; then
          echo "Error: Project '${PROJECT_NAME}' not found."
          exit 1
        fi

        echo "project_number=${project_number}" >> $GITHUB_ENV
        echo "project_id=${project_id}" >> $GITHUB_ENV
    - name: Get issues from repository
      id: get-issues
      run: |
        issues=$(gh issue list --repo "${{ github.repository }}" --json number --jq '.[].number' | tr '\n' ' ')
        echo "issues=$issues" >> $GITHUB_ENV
    - name: Add issues to project if not already present
      env:
        ISSUES: "${{ env.issues }}"
        PUSH_TO_PROJECT_TOKEN: "${{ secrets.PUSH_TO_PROJECT_TOKEN }}"
        PROJECT_ID: "${{ env.project_id }}"
      run: |
        existing_issue_ids=()
        has_next_page=true
        end_cursor=""

        while [ "$has_next_page" = true ]; do
          response=$(gh api graphql -f query='query($projectId: ID!, $after: String) { node(id: $projectId) { ... on ProjectV2 { items(first: 100, after: $after) { pageInfo { hasNextPage endCursor } nodes { content { __typename ... on Issue { id } } } } } } }' -F projectId="$PROJECT_ID" -F after="$end_cursor")
          existing_issue_ids+=($(echo "$response" | jq -r '.data.node.items.nodes[].content | select(. != null and .__typename == "Issue") | .id'))
          has_next_page=$(echo "$response" | jq -r '.data.node.items.pageInfo.hasNextPage')
          end_cursor=$(echo "$response" | jq -r '.data.node.items.pageInfo.endCursor')
          if [ "$end_cursor" = "null" ]; then
            end_cursor=""
          fi
        done

        existing_issue_ids_str="${existing_issue_ids[*]}"
        for issue in $ISSUES; do
          issue_node_id=$(gh issue view $issue --repo "${{ github.repository }}" --json id --jq '.id')
          if [[ " ${existing_issue_ids_str[@]} " =~ " $issue_node_id " ]]; then
            echo "Issue #$issue is already in the project. Skipping."
          else
            gh api graphql -f query='mutation($projectId: ID!, $contentId: ID!) { addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) { item { id } } }' -f projectId="$PROJECT_ID" -f contentId="$issue_node_id"
            echo "Added issue #$issue to the project."
          fi
        done