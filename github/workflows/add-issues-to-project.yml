# name: Add Issues to Project

# This GitHub Actions workflow adds issues from the repository to a specified GitHub Project.
#
# Usage Instructions:
#
# 1. **Copy the Workflow File**
#    - Copy this file into your repository's `.github/workflows` directory.
#    - Name it appropriately, for example, `add-issues-to-project.yml`.
#
# 2. **Set Up the Personal Access Token (PAT)**
#    - Ensure you have a repository secret named `PUSH_TO_PROJECT_TOKEN` with a PAT that has the necessary scopes:
#      - `repo`: Full control of private repositories.
#      - `admin:org`: Read and write access to organization projects (if working with organization projects).
#      - `workflow`: To interact with GitHub Actions workflows.
#      - `read:project` and `write:project`: For project access.
#    - To create the PAT:
#      1. Go to **GitHub Settings** > **Developer settings** > **Personal access tokens** > **Tokens (classic)**.
#      2. Click **Generate new token**.
#      3. Select the required scopes.
#      4. Generate and copy the token.
#      5. In your repository, go to **Settings** > **Secrets and variables** > **Actions** > **Secrets**.
#      6. Add a new secret named `PUSH_TO_PROJECT_TOKEN` and paste the PAT.
#
# 3. **Trigger the Workflow**
#    - Navigate to the **Actions** tab in your repository.
#    - Select the **Add Issues to Project** workflow.
#    - Click on **Run workflow**.
#    - You will be prompted to provide the following inputs:
#      - **project_name**: The exact name of your project as it appears on GitHub.
#      - **org_name**: (Optional) The name of your organization if the project is an organization project.
#        - If `org_name` is provided, the workflow treats the project as an organization project.
#        - If `org_name` is left blank, the workflow treats the project as a user project.
#
# 4. **Monitor the Workflow**
#    - The workflow will authenticate using the provided PAT.
#    - It will automatically determine the project ID based on the provided inputs.
#    - It will fetch all issues from your repository.
#    - It will check which issues are not already in the project and add them accordingly.
#    - You can view the progress and logs in the **Actions** tab.
#
# 5. **Troubleshooting**
#    - **Project Not Found**: If you receive an error stating the project is not found, double-check the project name and ensure it matches exactly, including case sensitivity.
#    - **Authentication Errors**: Verify that the PAT has the necessary permissions and is correctly set as a repository secret.
#    - **Permissions**: For organization projects, ensure that the user associated with the PAT has access to the organization and the project.
#    - **API Rate Limits**: Be mindful of GitHub's API rate limits if working with a large number of issues or projects.

name: Add Issues to Project

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Name of the project'
        required: true
        default: 
      org_name:
        description: 'Organization name (if project is an organization project)'
        required: false
        default: SATVILab

jobs:
  add-issues-to-project:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up GitHub CLI and jq
      run: |
        sudo apt update -y
        sudo apt install -y gh jq

    - name: Authenticate with PAT
      env:
        PUSH_TO_PROJECT_TOKEN: ${{ secrets.PUSH_TO_PROJECT_TOKEN }}
      run: |
        unset GH_TOKEN
        unset GITHUB_TOKEN
        echo "$PUSH_TO_PROJECT_TOKEN" | gh auth login --with-token
        
    - name: Install gh-projects extension
      env:
        PUSH_TO_PROJECT_TOKEN: ${{ secrets.PUSH_TO_PROJECT_TOKEN }}
      run: |
        gh extension install github/gh-projects

    - name: Get project ID
      id: get-project-id
      env:
        PROJECT_NAME: ${{ github.event.inputs.project_name }}
        ORG_NAME: ${{ github.event.inputs.org_name }}
      run: |
        if [ -z "${ORG_NAME}" ]; then
          echo "Listing user projects:"
          gh projects list --format json
          project_number=$(gh projects list --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .number')
          project_id=$(gh projects list --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .id')
        else
          echo "Listing organization projects:"
          gh projects list --org "${ORG_NAME}" --format json
          project_number=$(gh projects list --org "${ORG_NAME}" --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .number')
          project_id=$(gh projects list --org "${ORG_NAME}" --format json | jq '.projects[] | select(.title=="'"${PROJECT_NAME}"'") | .id')
        fi

        if [ -z "${project_number}" || -z "${project_id}" ]; then
          echo "Error: Project '${PROJECT_NAME}' not found."
          exit 1
        fi

        echo "Project number: ${project_number}"
        echo "Project id: ${project_id}"
        echo "project_number=${project_number}" >> $GITHUB_ENV
        echo "project_id=${project_id}" >> $GITHUB_ENV

    - name: Get issues from repository
      id: get-issues
      run: |
        issues=$(gh issue list --repo "${{ github.repository }}" --json number --jq '.[].number' | tr '\n' ' ')
        echo "issues=$issues" >> $GITHUB_ENV

    - name: Add issues to project if not already present
      env:
        ISSUES: ${{ env.issues }}
        PUSH_TO_PROJECT_TOKEN: ${{ secrets.PUSH_TO_PROJECT_TOKEN }}
        PROJECT_ID: ${{ env.project_id }}
      run: |
        # Initialize variables
        existing_issue_ids=()
        has_next_page=true
        end_cursor=""

        while [ "$has_next_page" = true ]; do
          # Fetch project items with pagination
          response=$(gh api graphql -f query='
            query($projectId: ID!, $after: String) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100, after: $after) {
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                    nodes {
                      content {
                        __typename
                        ... on Issue {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -F projectId="$PROJECT_ID" -F after="$end_cursor")

          # Extract issue IDs and pagination info
          existing_issue_ids+=($(echo "$response" | jq -r '.data.node.items.nodes[].content | select(. != null and .__typename == "Issue") | .id'))
          has_next_page=$(echo "$response" | jq -r '.data.node.items.pageInfo.hasNextPage')
          end_cursor=$(echo "$response" | jq -r '.data.node.items.pageInfo.endCursor')

          # Handle null end_cursor
          if [ "$end_cursor" = "null" ]; then
            end_cursor=""
          fi
        done

        # Convert existing_issue_ids to a string for easier comparison
        existing_issue_ids_str="${existing_issue_ids[*]}"

        # Loop through each issue in the repository
        for issue in $ISSUES; do
          # Get the issue node ID
          issue_node_id=$(gh issue view $issue --repo "${{ github.repository }}" --json id --jq '.id')

          # Check if the issue is already in the project
          if [[ " ${existing_issue_ids_str[@]} " =~ " $issue_node_id " ]]; then
            echo "Issue #$issue is already in the project. Skipping."
          else
            # Add the issue to the project
            gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f contentId="$issue_node_id"
            echo "Added issue #$issue to the project."
          fi
        done
